{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs" /* Specify what module code is generated. */,
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // 타입스크립트 프로그램 일부에 자바스크립트 파일을 사용할 수 있다.
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // 타입스크립트가 오류를 보고해준다. 
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // 타입스크립트에 소스맵의 생성 여부를 지시할 수 있다.
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist" /* Specify an output folder for all emitted files. */,
    // 기본값 : "./"  out Directory 의 준말
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // true로 설정하면 파일을 컴파일하지 않게 된다. 타입 검사는 해주지만 js파일은 만들어주지 않도록 해준다.
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // 타입스크립트 파일이 오류가 없는 경우에만 컴파일 하여 js파일 생성 및 업뎃 해준다.
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    // strick : true가 기본값이다.
    // strick모드를 true로 설정하면 아래의 몇가지 옵션을 true로 한 것과 동일한 효과를 가진다. (포함하고 있음)
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },

  /* ----- 하위 의 폴더들만 컴파일 하도록 설정하는 방법 , 큰따옴표를 써야한다. 최상위 옵션에 files 설정이 가능하다. ---- */
  //tsc 명령어를 치면 하위 폴더들만 자바스크립트로 컴파일 하게 된다.
  // 기본값은 json파일의 동등위치, 하위에 있는 모든 파일을 컴파일하는 것이 기본값이다.
  // "files": ["farmstand.ts","index.ts"]

  /* -------------------------- src 폴더만 컴파일링 하고 싶을 때 -------------------------- */
  "include": ["src"],
  /* ----------------------------- 컴파일 제외하고 싶은 파일 ----------------------------- */
  //먼저 include로 크게 설정한 다음에 제외할 파일을 exclude에 넣는다. 파일의 경로를 잘 넣어준다.
  //**.test.ts 이런식으로 끝에 test가 들어간 ts파일을 제외하는 식으로 '패턴'을 주로 넣는다고 한다.
  //기본값은 node_modules, bower_compo 파일이다. 의존성있는 파일이므로. exclude를 별도로 적을 때 꼭 잊지않고 "node_modules"를 넣어주자.
  "exclude": ["src/dontTouch.ts"]
}

/* ------------------------------ 자바스크립트로 컴파일하기 ----------------------------- */
//tsc index.ts

/* ---------------------------------- 감시모드 ---------------------------------- */
// 단 한번만 컴파일 하지 않도록 하는 실행코드, 해당ts파일의 내용이 변경되면 자동으로 컴파일해준다
//tec -w index.ts
// Ctrl+c 로 끝내면 된다.

//tsconfig.json 파일과 같은 위치에 있는 ts파일들을 일일이 컴파일(tsc 파일명.ts)코드를 치지 않아도 된다.
//tsc 만 치면 ts파일들은 모두 자바스크립트로 컴파일되어 js파일에 업데이트된다.
//동일하게 tsc -w만 쳐도 모든 ts파일이(tsconfig.json과 같은 위치에 있는) 컴파일 된다.

/* -------------------------- 자바스크립트 컴파일 폴더 - dist -------------------------- */
// 타입스크립트 파일은 src에 , 자바스크립트로 컴파일된 파일은 dist라는 폴더에 넣는 것이 통상적이다.
// outDir(out Directory): 옵션이다.
// 기본값 : "./" 경로설정! -> "./dist"로 하면 dist폴더에 들어간다.

/* ---------------------- 컴파일 되는 javascript 의 버전 제어 옵션 ---------------------- */
// "target" 옵션
// 기본값 : ES3 이라고 하는데 es2016으로 되어있다.. 사이트에서도 ES3라고 써있는데 의문입니다^^..
// var 나 화살표함수 같은 것들이 대표적!

/* -------------------------------- strick 옵션 ------------------------------- */
// 엄격한 타입 검사 모드 => 최종 결과의 정확도를 높여준다. 

/* ---------------------------- noImplicitAny 옵션 ---------------------------- */
// true 로 설정하면 암시적 any타입을 가질 때 에러를 일으킨다. (다만, strick모드가 true일 때도 에러가 나기는 함.)

/* --------------------------- strictNullChecks옵션 --------------------------- */

